#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>

int create_lock (char * file_name) {
  FILE * fd;
  DIR * curr_dir;
  char lock_name [100], path_cdir [100]; /* a name with size 100 chars */
  struct dirent *dir;  

  snprintf(lock_name,100,".%s.lock",file_name);

  if (getcwd(path_cdir,100) == NULL) {
    perror("getcwd");
    return -1;
  }

  if ((curr_dir = opendir(path_cdir)) == NULL) {
    perror("opendir");
    return -2;
  }
  
  while ((dir = readdir(curr_dir)) != NULL) {
    if (dir->d_name[0] != '.') continue;
    else 
      if (!strcmp(dir->d_name,lock_name)) { printf ("%s\n",dir->d_name); return -3; }
      else continue;
  }

  if ((fd = fopen (lock_name,"ab+")) == NULL) return -4;
  else fprintf (fd,'0');
  return 0;
}

/*At first, this function comproves if exists a file lock, if it exists try to take it.
If the lock is free can take it, in another way the process waits till the lock is released*/

void file_lock (char * file) {
  FILE * fd;
  char lock_value[1];
  struct timespec timer;
  timer.tv_sec = 0;
  timer.tv_nsec = 100000000;

  int ret = create_lock (file);
  printf("%d\n",ret);
  if (ret != 0) {
    fprintf (stderr,"cannot create lock");
    return;
  }
 prove:  if ((fd = fopen (file, "w+")) == NULL) {
    perror("open");
    return;
  }
  fgets(lock_value,1,fd);
  if (lock_value[0] == '0') fprintf(fd,"1");
  else {nanosleep (&timer, &timer); goto prove;}
}

/** This function is so easy, the process release the lock */

void file_unlock (char * file) {
  FILE * fd;
  char lock_value[1];
  if ((fd = fopen (file,"w+")) == NULL) {
    perror("open");
    return;
  }
  fgets(lock_value,1,fd);
  (lock_value[0] == '1') ? fprintf (fd,"0") : fprintf(stderr,"lock already released");
}

void clear_lock (char * file) {
  FILE * fd;
  char lock_value[1];
  if ((fd = fopen (file,"w+")) == NULL) {
    perror("open");
    return;
  }
  fgets(lock_value,1,fd);
  (lock_value[0] == '0') ? remove (file) : fprintf(stderr,"cannot remove lock, still in use");
}
